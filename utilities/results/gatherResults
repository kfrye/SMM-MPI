#!/usr/bin/python
__author__ = 'kmacarenco'

import json
import os
import argparse
import re

parser = argparse.ArgumentParser(description='To get test folder path')
parser.add_argument('-r', dest='resultsLoc', type=str, help='Results folder location', required=True)

args = parser.parse_args()


resultDict = {}


print "Gathering Results"

def normalize_entries(s, rs):
    s = s.strip()
    s = re.sub(r'  ', '', s)
    s = re.sub(r'  ', '', s)
    s = re.sub(r'[.]', '', s)
    s = re.sub(r'[-]', '', s)
    s = re.sub(r' |[/]|[(]|[)]', '_', s)
    s = s.upper()
    rs = rs.strip()
    try:
        rs = int(rs)
    except ValueError:
        try:
            rs = float(rs)
        except ValueError:
            pass
    return s, rs

def normalize_data(line):
    l = line.strip()
    l = re.sub(r'[ ]*=[ ]*', '=', l)
    l = re.sub(r'[[]warn[]].*',"", l)
    a = l.split("=")
    b = l.split(":")
    if len(a) == 2 and len(a[1]) > 0:
        return normalize_entries(a[0], a[1])
    elif len(b) == 2 and len(b[1]) > 0:
        return normalize_entries(b[0], b[1])
    else:
        return None, None

#For example results are in ../results/ep/...
tests = os.listdir(args.resultsLoc) #list of folder in ../results/..
for test in tests:
    if test.startswith("."):
        continue
    resultsDirPath = args.resultsLoc + "/" + test + "/"
    try:
        files = os.listdir(resultsDirPath)
    except OSError:
        continue
    resultDict[test] = []
    for f in files:
        if f.startswith("."):
            continue
        with open(resultsDirPath + f, 'r') as result:
            thisItem = {}
            for line in result:
                s, rs = normalize_data(line)
                if s is not None and rs is not None and not s in thisItem:
                    thisItem[s] = rs;
            if "START_TIME" not in thisItem:
                thisItem["START_TIME"] = int(f)
        if not len(thisItem) == 0:
            resultDict[test].append(thisItem)

outfile = 'data.txt'
try:
    os.remove(outfile)
except OSError:
    pass

with open(outfile, 'w') as outfile:
    json.dump(resultDict, outfile, sort_keys=True, indent=4, separators=(',', ': '))
