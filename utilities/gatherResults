#!/usr/bin/python
import json
import os
import sys
import argparse
import re
from pprint import  pprint

parser = argparse.ArgumentParser(description='To get test folder path')
parser.add_argument('-t', dest = 'testType', type=str, help= 'bt cg dt ep ft is lu mg or sp', required=True)
parser.add_argument('-n', dest = 'nProc', type=str, help= 'Maximum number of processes for example: -n 32', required=True)
#parser.add_argument('-s', dest = 'worldSize', type=str, help= 'S W A B C D E', required=True)
#parser.add_argument('-t', dest = 'testPath', type=str, help= 'Test folder path', required=True)
#parser.add_argument('-t', dest = 'testPath', type=str, help= 'Test folder path', required=True)
testTypes=["bt","cg","dt","ep","ft","is","lu","mg","or","sp"]
args = parser.parse_args()
if args.testType is None or args.testType not in testTypes:
   sys.exit(1)


testType  = args.testType
#worldSizes=["S","W","A","B","C","D","E"]
worldSizes=["S","W","A","B"]
nProcs=[1,2,4,8,16,32,64]
nProc=1
maxNProc=int(args.nProc)
resultString="{"

#files=os.listdir(args._testPath)



print "Gathering Results"
print testType

resultsDirPath = "/smmProject/results/"+testType +"/"
sep=""

for worldSize in worldSizes:
    resultString+="\""+worldSize+"\""+":"
    resultString+="{"
    while nProc <= maxNProc:
        resultString+="\""+str(nProc)+"\""+":"
        resultString+="{"
        currentPath=resultsDirPath+worldSize+"/"+str(nProc)
        files=os.listdir(currentPath)
        print currentPath
        print files
        count=1
        for f in files:
            resultString+="\""+str(count)+"\""+":"
            resultString+="{"
            with open(currentPath+"/"+f, 'r') as result:
                for line in result:
                    l = line.strip()
                    l = re.sub(r'[ ]*=[ ]*','=',l)
                    a = l.split("=")
                    if len(l.split("=")) == 2:
                        s = a[0]
                        s = re.sub(r'  ','',s)
                        rs = re.sub(r'  ','',a[1])
                        resultString+="\""+s+"\""+":"+"\""+rs+"\""+","
            resultString = resultString[:-1]
            resultString += "},"
            count += 1
        count=1
        resultString = resultString[:-1]
        resultString += "},"
        nProc *=2
    nProc=1
    resultString = resultString[:-1]
    resultString += "},"
resultString = resultString[:-1]
resultString += "},"

resultString = resultString[:-1]

pprint(resultString)

#print resultString[123968]
#print resultString[123969]

j=json.loads(resultString);
pprint(j)

class test:
    pass

class testFactory:
    result = []
    def __init__(self, jsonEPTests):
        for size in jsonEPTests:
            sizeDict = jsonEPTests[size]
            for aTry in sizeDict:
                self.result.append(epTest(sizeDict[aTry]))

                
        pass
class ep(test):
    tests = {} #should be a dictionary by size
    def __init__(self, jsonEPTests):
        for key in jsonEPTests:
            self.tests[key]=testFactory(jsonEPTests[key]).result
        pass

    def asCSV(self):
        csvString="Class,Time,Total Processes,CPU Time,Mop per s Total, Mps per s per porcess,World Size,Verification"
        for key in self.tests:
            for item in self.tests[key]:
                csvString+=item.asCSV()+"\n"
        print csvString
            
#{u'A': {u'1': {u'1': {u'CPU Time': u'23.4316',
#                      u'Class': u'A',
#                      u'Compile date': u'04 Aug 2015',
#                      u'Compiled procs': u'1',
#                      u'FFLAGS': u'-O',
#                      u'FLINK': u'$(MPIF77)',
#                      u'FLINKFLAGS': u'-O',
#                      u'FMPI_INC': u'-I/usr/include/openmpi-x86_64/',
#                      u'FMPI_LIB': u'-L/usr/lib64/openmpi/lib/ -lmpi',
#                      u'Iterations': u'0',
#                      u'MPIF77': u'mpif77',
#                      u'Mop/s total': u'22.91',
#                      u'Mop/s/process': u'22.91',
#                      u'N': u'2^ 28',
#                      u'No. Gaussian Pairs': u'210832767.',
#                      u'Operation type': u'Random numbers generated',
#                      u'RAND': u'randi8',
#                      u'Size': u'536870912',
#                      u'Sums': u'-4.295875165629885D+03 -1.580732573678432D+04',
#                      u'Time in seconds': u'23.43',
#                      u'Total processes': u'1',
#                      u'Verification': u'SUCCESSFUL',
#                      u'Version': u'3.3.1'},
#               u'2': {u'CPU Time': u'23.0325
class epTest:
    
    def __init__(self, jsonEP):
        self.CPU_Time           = jsonEP['CPU Time']
        self.Class              = jsonEP['Class']
        self.Compile_date       = jsonEP['Compile date']
        self.Compiled_procs     = jsonEP['Compiled procs']
        self.FFLAGS             = jsonEP['FFLAGS']
        self.FLINK              = jsonEP['FLINK']
        self.FLINKFLAGS         = jsonEP['FLINKFLAGS']
        self.FMPI_INC           = jsonEP['FMPI_INC']
        self.FMPI_LIB           = jsonEP['FMPI_LIB']
        self.Iterations         = jsonEP['Iterations']
        self.MPIF77             = jsonEP['MPIF77']
        self.Mop_s_total        = jsonEP['Mop/s total']
        self.Mop_s_process      = jsonEP['Mop/s/process']
        self.N                  = jsonEP['N']
        self.No_Gaussian_Pairs  = jsonEP['No. Gaussian Pairs']
        self.Operation_type     = jsonEP['Operation type']
        self.RAND               = jsonEP['RAND']
        self.Size               = jsonEP['Size']
        self.Sums               = jsonEP['Sums']
        self.Time_in_seconds    = jsonEP['Time in seconds']
        self.Total_processes    = jsonEP['Total processes']
        self.Verification       = jsonEP['Verification']
        self.Version            = jsonEP['Version']

    def addOpt(self, string, var):
        string += var +","

    def asCSV(self):
        csvString = ""
        self.addOpt(csvString, self.Class)
        self.addOpt(csvString, self.CPU_Time         )
        self.addOpt(csvString, self.Class            )
        self.addOpt(csvString, self.Compile_date     )
        self.addOpt(csvString, self.Compiled_procs   )
        self.addOpt(csvString, self.FFLAGS           )
        self.addOpt(csvString, self.FLINK            )
        self.addOpt(csvString, self.FLINKFLAGS       )
        self.addOpt(csvString, self.FMPI_INC         )
        self.addOpt(csvString, self.FMPI_LIB         )
        self.addOpt(csvString, self.Iterations       )
        self.addOpt(csvString, self.MPIF77           )
        self.addOpt(csvString, self.Mop_s_total      )
        self.addOpt(csvString, self.Mop_s_process    )
        self.addOpt(csvString, self.N                )
        self.addOpt(csvString, self.No_Gaussian_Pairs)
        self.addOpt(csvString, self.Operation_type   )
        self.addOpt(csvString, self.RAND             )
        self.addOpt(csvString, self.Size             )
        self.addOpt(csvString, self.Sums             )
        self.addOpt(csvString, self.Time_in_seconds  )
        self.addOpt(csvString, self.Total_processes  )
        self.addOpt(csvString, self.Verification     )
        self.addOpt(csvString, self.Version          )

        return csvString

        

epres = ep(j)
epres.asCSV()
